<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singleton on Handnew&#39;s blog</title>
    <link>https://handnew04.github.io/tags/singleton/</link>
    <description>Recent content in Singleton on Handnew&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 24 Apr 2019 13:26:32 +0900</lastBuildDate>
    
	<atom:link href="https://handnew04.github.io/tags/singleton/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[디자인패턴] Singleton Pattern</title>
      <link>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-singleton-pattern/</link>
      <pubDate>Wed, 24 Apr 2019 13:26:32 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-singleton-pattern/</guid>
      <description>싱글톤 패턴이란 단 하나의 인스턴스만을 사용하는 패턴이다.  예시 스피커의 볼륨을 조절하는 클래스의 인스턴스가 여러개라면 조절 할 때 마다 모든 인스턴스를 조절 해야하는 번거로움이 생긴다.
그래서 하나의 인스턴스를 사용한다.
하나의 인스턴스를 사용하기 위해 static으로 선언한다.
package Singleton; public class SystemSpeaker { static private SystemSpeaker instance; private int volume; private SystemSpeaker() { volume = 5; } public static SystemSpeaker getInstance() { if (instance == null) { //시스템 스피커/ 아직 생성이 되지 않았을때는 생성을 해주고 instance = new SystemSpeaker(); } //instance가 생성되어 있다면 그 인스턴스를 리턴한다.</description>
    </item>
    
  </channel>
</rss>
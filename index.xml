<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Handnew&#39;s blog</title>
    <link>https://handnew04.github.io/</link>
    <description>Recent content on Handnew&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 22 Jul 2019 23:06:14 +0900</lastBuildDate>
    
        <atom:link href="https://handnew04.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>[WIL] 7월 3주차</title>
      <link>https://handnew04.github.io/post/wil-7%EC%9B%94-3%EC%A3%BC%EC%B0%A8/</link>
      <pubDate>Mon, 22 Jul 2019 23:06:14 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/wil-7%EC%9B%94-3%EC%A3%BC%EC%B0%A8/</guid>
      <description>Logcat 색상 설정  안드로이드 스튜디오의 Ffile - Setting-Editor-Color Scheme- Android Logcat 에서 톱니바퀴를 눌러 import 를 하거나 나의 색상을 export 하여 테마를 저장할 수 있다.  프로젝트 전체 폰트 적용 방법  앱에서 기본으로 사용할 폰트의 경우 전체 적용이 필요하다 style.xml 에서 해당 앱의 베이스테마에 fontFamily 태그를 추가하여 사용할 폰트를 기입 다만 적용 되지 않는 다이얼로그 존재가 가능하며 그 부분에 대해선 해당 TextView 의 스타일이나 layout의 xml 파일에서 직접 추가 필요 layout에서 theme 으로 수정한 앱테마를 받고있는지를 확인 -&amp;gt; 받는다면 적용됨  0719 review  for문 안에 for 문이 또 들어가는 등.</description>
    </item>
    
    
    
    <item>
      <title>[WIL] 7월 2주차</title>
      <link>https://handnew04.github.io/post/wil-7%EC%9B%94-2%EC%A3%BC%EC%B0%A8/</link>
      <pubDate>Mon, 22 Jul 2019 23:01:20 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/wil-7%EC%9B%94-2%EC%A3%BC%EC%B0%A8/</guid>
      <description>안드로이드 R 에러  file 의 Invalidate Caches / Restart (캐시를 지우는 것)
  windowSoftInputMode  키보드가 필요한 액티비티에 사용. 매니패스트의 액티비티 태그에 android:windowSoftInputMode=&amp;ldquo;&amp;rdquo; 로 사용 &amp;rdquo;&amp;rdquo; 에 adjustPan 등을 입력. 종류가 다양함  안드로이드 해상도 별 크기 대응 참고블로그
 dimens.xml의 해상도 설정은 value폴더를 나뉘는 것으로 생성 value-hdpi, value-xdpi 등 필요한 dpi 별 폴더를 res 폴더 아래에 생성하여 해당 폴더안에 dimens라는 이름으로 xml 파일 생성  안드로이드 해상도 별 크기 대응 2  dimens 로 사용 시 같은 xxhdpi 를 사용하지만 화면의 크기가 다른 경우 발생.</description>
    </item>
    
    
    
    <item>
      <title>[WIL] 7월 1주차</title>
      <link>https://handnew04.github.io/post/wil-7%EC%9B%94-1%EC%A3%BC%EC%B0%A8/</link>
      <pubDate>Mon, 22 Jul 2019 22:38:06 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/wil-7%EC%9B%94-1%EC%A3%BC%EC%B0%A8/</guid>
      <description> WeakReference  핸들러를 이너 클래스로 사용 시 메모리 누수* 발생 가능. 그 상황을 방지 하는 역할
 기존 핸들러 클래스를 static 클래스로 사용
 핸들러 내부에서 해당 액티비티 타입의 WeakReference 변수를 생성하여 사용
  Private final WeakReference&amp;lt;StartActivity&amp;gt; mActivity;  메모리 누수
 AsyncTask 가 제 할일을 마친 후, 사용하던 메모리를 다시 main 에게 돌려 주어야 하는데, 그러지 않는 경우
   AdvertisingIdClient class
 구글의 플레이 서비스를 사용하는 디바이스의 ad ID를 얻을 수 있음 유저 식별용으로 적합  </description>
    </item>
    
    
    
    <item>
      <title>[디자인패턴] Singleton Pattern</title>
      <link>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-singleton-pattern/</link>
      <pubDate>Wed, 24 Apr 2019 13:26:32 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-singleton-pattern/</guid>
      <description>싱글톤 패턴이란 단 하나의 인스턴스만을 사용하는 패턴이다.  예시 스피커의 볼륨을 조절하는 클래스의 인스턴스가 여러개라면 조절 할 때 마다 모든 인스턴스를 조절 해야하는 번거로움이 생긴다.
그래서 하나의 인스턴스를 사용한다.
하나의 인스턴스를 사용하기 위해 static으로 선언한다.
package Singleton; public class SystemSpeaker { static private SystemSpeaker instance; private int volume; private SystemSpeaker() { volume = 5; } public static SystemSpeaker getInstance() { if (instance == null) { //시스템 스피커/ 아직 생성이 되지 않았을때는 생성을 해주고 instance = new SystemSpeaker(); } //instance가 생성되어 있다면 그 인스턴스를 리턴한다.</description>
    </item>
    
    
    
    <item>
      <title>[디자인패턴] Template Method Pattern</title>
      <link>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-template-method-pattern/</link>
      <pubDate>Mon, 22 Apr 2019 19:05:14 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-template-method-pattern/</guid>
      <description>알고리즘의 구조를 메서드에 정의하고 하위 클래스에서 알고리즘의 구조의 변경 없이 알고리즘을 재정의 하는 패턴  구현하려는 알고리즘이 일정한 프로세스가 있다 구현하려는 알고리즘이 변경 가능성이 있다   템플릿 메서드 기본 설계구조 템플릿 메서드 패턴의 구현 단계  요구사항에 대한 알고리즘을 여러 단계로 나눈다 나눠진 알고리즘의 단계를 메서드로 선언한다 알고리즘을 수행할 템플릿 메서드를 만든다 하위 클래스에서 나눠진 메서드들을 구현한다  예제 신작 게임의 접속을 구현해주세요
 requestConnection(String str): String  유저가 게임 접속시 다음을 고려해야 합니다</description>
    </item>
    
    
    
    <item>
      <title>[디자인패턴] Adapter Pattern</title>
      <link>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-adapter-pattern/</link>
      <pubDate>Sun, 21 Apr 2019 16:11:26 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-adapter-pattern/</guid>
      <description>Adapter란?  기계, 기구 등을 다목적으로 사용하기 위한 부가기구
 전기 110v 코드를 220v 로 바꿔주는 것 또한 어댑터
  코드에서도 마찬가지로 사용처에 맞게 변환을 해주는 역할을 한다.
Math 라는 클래스가 있고 메서드는 double로 값을 받고 리턴값도 double 로 내보낸다.
public class Math { public static double twoTime(double num) { return num * 2; } public static double half(double num) { return num / 2; } }  adapter 인터페이스</description>
    </item>
    
    
    
    <item>
      <title>[디자인패턴] Strategy Pattern</title>
      <link>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-strategy-pattern/</link>
      <pubDate>Fri, 19 Apr 2019 19:17:56 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-strategy-pattern/</guid>
      <description>인터페이스 델리게이트 스트래티지 패턴   인터페이스  두 객체간의 연결을 해주는 장치 기능에 대한 선언과 구현의 분리 기능을 사용하는 통로  public interface Ainterface { //기능의 선언 public void funcA(); }  public class Aclass implements Ainterface { @Override public void funcA() { //기능의 구현 System.out.println(&amp;quot;AAA&amp;quot;); } }  public class Main { public static void main(String[] args){ Ainterface ainterface = new Aclass(); //a인터페이스를 사용할 수 있는 통로 ainterface.</description>
    </item>
    
    
    
    <item>
      <title>[Kotlin] Kotlin Night 서울 참여 후기</title>
      <link>https://handnew04.github.io/post/kotlin-kotlin-night-%EC%84%9C%EC%9A%B8-%EC%B0%B8%EC%97%AC-%ED%9B%84%EA%B8%B0/</link>
      <pubDate>Tue, 09 Apr 2019 14:39:50 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/kotlin-kotlin-night-%EC%84%9C%EC%9A%B8-%EC%B0%B8%EC%97%AC-%ED%9B%84%EA%B8%B0/</guid>
      <description>코틀린 컨퍼런스, 코틀린 나이트 서울에 다녀왔습니다.🎉 개발자 관련 행사의 첫 참여인 만큼 설렘과 기대로 날짜를 기다렸었다. 🙈
현재 안드로이드 개발자 취업준비를 하며, 코틀린에 대한 관심이 있었지만 코틀린에 대해 자세히 알진못했다. 그런데 마침, 코틀린 컨퍼런스가 열린다는 소식을 듣게 되었다.
‘Kotlin Night 서울’ 어떻게 진행 되었을까? 오후 6시부터 10시까지 진행된 코틀린 나이트. 그 세부 내용은 아래와 같다. (실제 행사에서는 전경주님과 강현식님의 순서가 변경 되었다)
 입장 등록 18:00~18:30 인공지능은 프로그래머를 대체할까? - 김상균님 18:30~19:10 이펙티브 자바와 코틀린 - 전경주님 19:10~19:50 자바 개발자 관점의 ‘왜 코틀린인가?</description>
    </item>
    
    
    
    <item>
      <title>[Hugo] Hugo git블로그 폰트 추가하기</title>
      <link>https://handnew04.github.io/post/hugo-hugo-git%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%B0%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <pubDate>Thu, 04 Apr 2019 18:29:41 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/hugo-hugo-git%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%B0%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <description>hugo theme 중 natrium 테마를 기준으로 작성하였습니다.
 기존의 글 내용을 보여주는 폰트가 한글지원이 되지 않아서 나눔고딕폰트로 변경하였다. 인터넷에서 무료로 나눔고딕 폰트를 다운로드 할 수 있다. 다운로드
나눔고딕 폰트를 블로그 &amp;gt; themes &amp;gt; 테마이름 &amp;gt; static &amp;gt; fonts 에 넣고 static 의 font.css 에 아래 코드를 추가하였다.
@font-face { font-family: &#39;Nanum-Gothic&#39;; font-style: normal; font-weight: 400; src: url(&#39;../fonts/Nanum-Gothic.ttf&#39;) format(&#39;truetype&#39;); }  그 후, static 의 main.css 파일에서 본문(body) 등의 font-family 에 Nanum-Gothic 을 추가하였다.</description>
    </item>
    
    
    
    <item>
      <title>[Hugo] Hugo gitpage utterances 댓글달기</title>
      <link>https://handnew04.github.io/post/hugo-hugo-gitpage-utterances-%EB%8C%93%EA%B8%80%EB%8B%AC%EA%B8%B0/</link>
      <pubDate>Thu, 04 Apr 2019 18:12:45 +0900</pubDate>
      
      <guid>https://handnew04.github.io/post/hugo-hugo-gitpage-utterances-%EB%8C%93%EA%B8%80%EB%8B%AC%EA%B8%B0/</guid>
      <description>이 블로그는 hugo를 이용하여 만들어진 블로그입니다.
블로그에 댓글기능을 달기위하여
utterances 를 사용하였습니다.
hugo theme 중 natrium 테마를 기준으로 글을 작성하였습니다.
 참고블로그 를 보고 진행하였는데, 블로그 내부에 어느부분에 코드를 삽입해야될지 알수가 없었다.
post, 즉 글을 쓸 때 마다 밑에 댓글입력칸이 보여야 했기에 테마 내부에 글의 레이아웃으로 쓰는 파일이 있을거라 생각했다.
자신의hugo블로그 &amp;gt; themes &amp;gt; 자신의테마 &amp;gt; layouts &amp;gt; _default &amp;gt; single.html 에서 찾을 수 있었다.
&amp;lt;/main&amp;gt; &amp;lt;script src=&amp;quot;https://utteranc.es/client.js&amp;quot; repo=&amp;quot;handnew04/blog-comments&amp;quot; issue-term=&amp;quot;pathname&amp;quot; theme=&amp;quot;github-light&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot; async&amp;gt; &amp;lt;/script&amp;gt; {{ partial &amp;quot;footer.</description>
    </item>
    
    
  </channel>
</rss>
